name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    # NOTE: You must set the NEO4J_PASSWORD secret in your GitHub repository or organization for CI to work.
    # Go to Settings > Secrets and variables > Actions > New repository secret, and add NEO4J_PASSWORD with a strong value.
    env:
      NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
    services:
      neo4j:
        image: neo4j:5
        env:
          NEO4J_AUTH: neo4j/${{ secrets.NEO4J_PASSWORD }}
          NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
        ports:
          - 7687:7687
        # The health check cannot access GitHub Actions secrets, so we must hardcode the password for CI only.
        # This value must match NEO4J_AUTH above and the NEO4J_PASSWORD secret.
        options: >-
           --health-cmd "cypher-shell -u neo4j -p ci-neo4j-pass 'RETURN 1'"
           --health-interval 10s
           --health-timeout 5s
           --health-retries 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.5

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Install uv and Python dependencies
        run: |
          uv venv
          . .venv/bin/activate
          uv pip install -r requirements.txt
          uv pip install -r requirements-dev.txt

      - name: Run migrations
        # NEO4J_PORT is required by scripts/run_migrations.py. See .env.example for all required variables.
        env:
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PORT: 7687
          PYTHONPATH: .
        run: |
          . .venv/bin/activate
          .venv/bin/python scripts/run_migrations.py

      - name: Run tests
        env:
          PYTHONPATH: .
        run: |
          . .venv/bin/activate
          uv run pytest --junitxml=pytest-results.xml --html=pytest-report.html 2>&1 | tee pytest-output.log

      - name: Check prompt history and reflection files
        run: |
          . .venv/bin/activate
          python scripts/check_prompt_history.py

      - name: Upload test logs and results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-artifacts
          path: |
            pytest-output.log
            pytest-results.xml
            pytest-report.html
