[project]
name = "azure-tenant-grapher"
version = "0.1.0"
description = "A Python application that exhaustively walks Azure tenant resources and builds a Neo4j graph database representation of those resources and their relationships."
authors = [{name = "Azure Tenant Grapher Team"}]
readme = "README.md"
requires-python = ">=3.8.1"
dependencies = [
    # Azure SDK dependencies
    "azure-identity>=1.15.0",
    "azure-mgmt-resource>=23.0.0",
    "azure-mgmt-compute>=30.0.0",
    "azure-mgmt-storage>=21.0.0",
    "azure-mgmt-network>=25.0.0",
    "azure-mgmt-keyvault>=10.0.0",
    "azure-mgmt-sql>=3.0.1",
    "azure-mgmt-web>=7.0.0",
    "azure-mgmt-monitor>=6.0.0",
    "azure-mgmt-authorization>=4.0.0",
    "openai>=1.12.0",
    # Neo4j dependencies
    "neo4j>=5.14.0",
    "py2neo>=2021.2.4",
    # Container management
    "docker>=7.0.0",
    # Utility dependencies
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "tqdm>=4.66.0",
    "aiohttp>=3.9.0",
    # CLI and dashboard dependencies
    "rich>=13.0.0",
    "readchar>=4.0.0",
    # Logging and configuration
    "pyyaml>=6.0",
    "colorlog>=6.8.0",
]

[project.scripts]
azure-tenant-grapher = "scripts.cli:main"
azure-graph = "scripts.cli:main"
atg = "scripts.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.6.0",
    "pyright>=1.1.350",
    "bandit>=1.7.10",
    "safety>=3.5.0",
    "pre-commit>=3.5.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=40"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | htmlcov
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88
src = ["src"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*" = ["B018", "B017", "B015"]  # Allow assert statements in tests

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.bandit]
exclude_dirs = ["tests", "htmlcov", ".venv", "scripts"]
skips = ["B101", "B102", "B105", "B108", "B608"]  # Skip common test-related false positives

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

[tool.pyright]
pythonVersion = "3.13"
typeCheckingMode = "strict"
reportMissingImports = false
reportMissingTypeStubs = false
reportUnknownVariableType = false
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownParameterType = false
reportUntypedFunctionDecorator = false
reportGeneralTypeIssues = false
reportOptionalMemberAccess = "warning"
reportUnusedImport = "error"
reportUnusedClass = "error"
exclude = ["dotnet", ".venv", "htmlcov", "tests/**/*", "scripts/**/*"]
